#!/usr/bin/env python3
# -*- coding: utf-8 -*-

import os
import sys
import argparse
import glob
from pathlib import Path
import time
import string
import re

# Import conversion functions from main script
from Script import (
    ocr_pdf_to_txt, 
    convert_pdf_to_txt_direct, 
    convert_pdf_to_docx_then_txt,
    extract_text_from_pdf_pypdf,
    convert_docx_to_txt
)

def batch_convert(input_folder, output_folder, method='auto', pattern='*.pdf'):
    """
    Batch convert PDF or DOCX files to TXT
    Args:
        input_folder: Folder containing files
        output_folder: Folder to save TXT files
        method: Conversion method ('auto', 'direct', 'ocr', 'docx', 'docx2txt')
        pattern: File pattern to match (default: *.pdf or *.docx)
    """
    
    # Find all files by pattern
    files = glob.glob(os.path.join(input_folder, pattern))
    files.extend(glob.glob(os.path.join(input_folder, pattern.upper())))
    
    if not files:
        print(f"‚ùå –§–∞–π–ª—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {input_folder}")
        return
    
    print(f"üìÅ –ù–∞–π–¥–µ–Ω–æ {len(files)} —Ñ–∞–π–ª–æ–≤ –ø–æ —à–∞–±–ª–æ–Ω—É {pattern}")
    print(f"üìÇ –ü–∞–ø–∫–∞ –≤–≤–æ–¥–∞: {input_folder}")
    print(f"üìÇ –ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞: {output_folder}")
    print(f"üîß –ú–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {method}")
    print("-" * 60)
    
    # Create output folder
    os.makedirs(output_folder, exist_ok=True)
    
    successful_conversions = []
    failed_conversions = []
    
    for i, file_path in enumerate(files, 1):
        filename = os.path.basename(file_path)
        print(f"[{i}/{len(files)}] –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è: {filename}")
        txt_path = os.path.join(output_folder, os.path.splitext(filename)[0] + '.txt')
        try:
            ext = os.path.splitext(filename)[1].lower()
            if ext == '.pdf':
                # Determine conversion method if auto
                if method == 'auto':
                    # Try direct extraction first
                    try:
                        text = extract_text_from_pdf_pypdf(file_path)
                        if len(text.strip()) > 50:  # If we got substantial text
                            conversion_method = 'direct'
                        else:
                            conversion_method = 'ocr'
                    except:
                        conversion_method = 'ocr'
                else:
                    conversion_method = method
                
                # Perform conversion
                if conversion_method == 'direct':
                    success, message = convert_pdf_to_txt_direct(file_path, output_folder)
                elif conversion_method == 'ocr':
                    success, message = ocr_pdf_to_txt(file_path, output_folder)
                elif conversion_method == 'docx':
                    success, message = convert_pdf_to_docx_then_txt(file_path, output_folder)
                else:
                    raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –º–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {conversion_method}")
            elif ext == '.docx':
                success, message = convert_docx_to_txt(file_path, output_folder)
            else:
                raise Exception(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞: {filename}")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ –º—É—Å–æ—Ä
            is_empty = False
            is_garbage = False
            if not os.path.exists(txt_path) or os.path.getsize(txt_path) == 0:
                is_empty = True
            else:
                with open(txt_path, 'r', encoding='utf-8', errors='ignore') as f:
                    content = f.read()
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–≤–∏–¥–∏–º—ã–µ —Å–∏–º–≤–æ–ª—ã (–ø—Ä–æ–±–µ–ª—ã, —Ç–∞–±—É–ª—è—Ü–∏–∏, –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫, –Ω–µ—Ä–∞–∑—Ä—ã–≤–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã, zero-width –∏ —Ç.–¥.)
                    content_no_invisible = re.sub(r'[\s\u00A0\u200B\u200C\u200D\uFEFF]', '', content)
                    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –Ω–µ–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã (ord < 32, –∫—Ä–æ–º–µ \n, \r, \t)
                    content_no_control = ''.join(c for c in content_no_invisible if ord(c) >= 32 or c in '\n\r\t')
                    # –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ —Ü–∏—Ñ—Ä—ã (–ª–∞—Ç–∏–Ω–∏—Ü–∞, –∫–∏—Ä–∏–ª–ª–∏—Ü–∞, —Ü–∏—Ñ—Ä—ã)
                    letters_digits = re.findall(r'[A-Za-z–ê-–Ø–∞-—è–Å—ë0-9]', content_no_control)
                    num_letters_digits = len(letters_digits)
                    total_chars = len(content)
                    # –ü—É—Å—Ç–æ–π, –µ—Å–ª–∏ –±—É–∫–≤/—Ü–∏—Ñ—Ä < 10
                    if num_letters_digits < 10:
                        is_empty = True
                    else:
                        # –ú—É—Å–æ—Ä, –µ—Å–ª–∏ –¥–æ–ª—è –±—É–∫–≤/—Ü–∏—Ñ—Ä < 0.3
                        if total_chars > 0 and (num_letters_digits / total_chars) < 0.3:
                            is_garbage = True
                        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ: –µ—Å–ª–∏ –µ—Å—Ç—å –¥–ª–∏–Ω–Ω—ã–µ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤ –∏ –Ω–µ—Ç –Ω–∏ –∫–∏—Ä–∏–ª–ª–∏—Ü—ã, –Ω–∏ –ª–∞—Ç–∏–Ω–∏—Ü—ã
                        has_garbage_seq = re.search(r'[^\w–ê-–Ø–∞-—è–Å—ë]{4,}', content)
                        has_letters = re.search(r'[A-Za-z–ê-–Ø–∞-—è–Å—ë]', content)
                        if has_garbage_seq and not has_letters:
                            is_garbage = True
            
            if is_empty:
                failed_conversions.append(filename)
                print(f"   ‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ø—É—Å—Ç—ã–º!")
                if os.path.exists(txt_path):
                    os.remove(txt_path)
            elif is_garbage:
                failed_conversions.append(filename)
                print(f"   ‚ùå –û—à–∏–±–∫–∞: —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç –º—É—Å–æ—Ä (–Ω–µ–æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Å–∏–º–≤–æ–ª—ã –∏–ª–∏ –Ω–∞–±–æ—Ä —Å–ø–µ—Ü—Å–∏–º–≤–æ–ª–æ–≤)!")
                if os.path.exists(txt_path):
                    os.remove(txt_path)
            elif success:
                successful_conversions.append(filename)
                print(f"   ‚úÖ –£—Å–ø–µ—à–Ω–æ: {message}")
            else:
                failed_conversions.append(filename)
                print(f"   ‚ùå –û—à–∏–±–∫–∞: {message}")
        except Exception as e:
            failed_conversions.append(filename)
            print(f"   ‚ùå –û—à–∏–±–∫–∞: {str(e)}")
    
    # Print summary
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ö–û–ù–í–ï–†–¢–ê–¶–ò–ò")
    print("=" * 60)
    print(f"‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {len(successful_conversions)}")
    print(f"‚ùå –û—à–∏–±–æ–∫: {len(failed_conversions)}")
    
    if failed_conversions:
        print(f"\nüìã –§–∞–π–ª—ã —Å –æ—à–∏–±–∫–∞–º–∏:")
        for failed_file in failed_conversions:
            print(f"   ‚Ä¢ {failed_file}")
        
        # Save error report
        error_report_path = os.path.join(output_folder, "error_report.txt")
        with open(error_report_path, 'w', encoding='utf-8') as f:
            f.write("–û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏\n")
            f.write("=" * 40 + "\n\n")
            f.write(f"–î–∞—Ç–∞: {time.strftime('%Y-%m-%d %H:%M:%S')}\n")
            f.write(f"–ü–∞–ø–∫–∞ –≤–≤–æ–¥–∞: {input_folder}\n")
            f.write(f"–ü–∞–ø–∫–∞ –≤—ã–≤–æ–¥–∞: {output_folder}\n")
            f.write(f"–ú–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {method}\n")
            f.write(f"–í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {len(files)}\n")
            f.write(f"–£—Å–ø–µ—à–Ω–æ: {len(successful_conversions)}\n")
            f.write(f"–û—à–∏–±–æ–∫: {len(failed_conversions)}\n\n")
            f.write("–°–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏ (–∫–æ–ø–∏—Ä—É–π—Ç–µ –¥–ª—è –ø–æ–∏—Å–∫–∞):\n")
            for failed_file in failed_conversions:
                fail_path = os.path.join(output_folder, os.path.splitext(failed_file)[0] + '.txt')
                reason = ''
                if not os.path.exists(fail_path) or os.path.getsize(fail_path) == 0:
                    reason = ' (–ø—É—Å—Ç–æ–π)'
                else:
                    with open(fail_path, 'r', encoding='utf-8', errors='ignore') as ftxt:
                        txt_content = ftxt.read()
                        txt_content_no_invisible = re.sub(r'[\s\u00A0\u200B\u200C\u200D\uFEFF]', '', txt_content)
                        txt_content_no_control = ''.join(c for c in txt_content_no_invisible if ord(c) >= 32 or c in '\n\r\t')
                        if txt_content_no_control == '':
                            reason = ' (–ø—É—Å—Ç–æ–π)'
                        else:
                            total_chars = len(txt_content)
                            invisible_count = sum(1 for c in txt_content if (ord(c) < 32 and c not in '\n\r\t'))
                            if total_chars > 0 and invisible_count / total_chars > 0.5:
                                reason = ' (–º—É—Å–æ—Ä)'
                            has_cyrillic = re.search(r'[–∞-—è–ê-–Ø—ë–Å]', txt_content)
                            has_garbage_seq = re.search(r'[^\w–∞-—è–ê-–Ø—ë–Å]{2,}', txt_content)
                            if has_garbage_seq and not has_cyrillic:
                                reason = ' (–º—É—Å–æ—Ä)'
                f.write(f"{failed_file}{reason}\n")
        
        print(f"\nüìÑ –û—Ç—á–µ—Ç –æ–± –æ—à–∏–±–∫–∞—Ö —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤: {error_report_path}")
    
    if successful_conversions:
        print(f"\n‚úÖ –£—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã:")
        for success_file in successful_conversions:
            print(f"   ‚Ä¢ {success_file}")

def main():
    parser = argparse.ArgumentParser(
        description='–ü–∞–∫–µ—Ç–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä PDF –≤ TXT',
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python batch_converter.py /path/to/pdfs /path/to/output
  python batch_converter.py /path/to/pdfs /path/to/output --method ocr
  python batch_converter.py /path/to/pdfs /path/to/output --method direct --pattern "*.PDF"
        """
    )
    
    parser.add_argument('input_folder', help='–ü–∞–ø–∫–∞ —Å PDF —Ñ–∞–π–ª–∞–º–∏')
    parser.add_argument('output_folder', help='–ü–∞–ø–∫–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è TXT —Ñ–∞–π–ª–æ–≤')
    parser.add_argument('--method', choices=['auto', 'direct', 'ocr', 'docx', 'docx2txt'], 
                       default='auto', help='–ú–µ—Ç–æ–¥ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: auto)')
    parser.add_argument('--pattern', default='*.pdf', 
                       help='–®–∞–±–ª–æ–Ω —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: *.pdf –∏–ª–∏ *.docx)')
    
    args = parser.parse_args()
    
    # Validate input folder
    if not os.path.exists(args.input_folder):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü–∞–ø–∫–∞ –≤–≤–æ–¥–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: {args.input_folder}")
        sys.exit(1)
    
    if not os.path.isdir(args.input_folder):
        print(f"‚ùå –û—à–∏–±–∫–∞: –ü—É—Ç—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–∞–ø–∫–æ–π: {args.input_folder}")
        sys.exit(1)
    
    # Start conversion
    try:
        batch_convert(args.input_folder, args.output_folder, args.method, args.pattern)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 